// Package errors contains errors for the domain "nt".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "nt",
	Title: "Nebula Tasks",
}

// KubernetesSection defines a section of errors with the following scope:
// Kubernetes errors
var KubernetesSection = &impl.ErrorSection{
	Key:   "kubernetes",
	Title: "Kubernetes errors",
}

// KubernetesManagerSetupErrorCode is the code for an instance of "manager_setup_error".
const KubernetesManagerSetupErrorCode = "nt_kubernetes_manager_setup_error"

// IsKubernetesManagerSetupError tests whether a given error is an instance of "manager_setup_error".
func IsKubernetesManagerSetupError(err errawr.Error) bool {
	return err != nil && err.Is(KubernetesManagerSetupErrorCode)
}

// IsKubernetesManagerSetupError tests whether a given error is an instance of "manager_setup_error".
func (External) IsKubernetesManagerSetupError(err errawr.Error) bool {
	return IsKubernetesManagerSetupError(err)
}

// KubernetesManagerSetupErrorBuilder is a builder for "manager_setup_error" errors.
type KubernetesManagerSetupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "manager_setup_error" from this builder.
func (b *KubernetesManagerSetupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error setting up the kubernetes manager",
		Technical: "there was an error setting up the kubernetes manager",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "manager_setup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     KubernetesSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Manager setup error",
		Version:          1,
	}
}

// NewKubernetesManagerSetupErrorBuilder creates a new error builder for the code "manager_setup_error".
func NewKubernetesManagerSetupErrorBuilder() *KubernetesManagerSetupErrorBuilder {
	return &KubernetesManagerSetupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewKubernetesManagerSetupError creates a new error with the code "manager_setup_error".
func NewKubernetesManagerSetupError() Error {
	return NewKubernetesManagerSetupErrorBuilder().Build()
}

// KubernetesPodLookupErrorCode is the code for an instance of "pod_lookup_error".
const KubernetesPodLookupErrorCode = "nt_kubernetes_pod_lookup_error"

// IsKubernetesPodLookupError tests whether a given error is an instance of "pod_lookup_error".
func IsKubernetesPodLookupError(err errawr.Error) bool {
	return err != nil && err.Is(KubernetesPodLookupErrorCode)
}

// IsKubernetesPodLookupError tests whether a given error is an instance of "pod_lookup_error".
func (External) IsKubernetesPodLookupError(err errawr.Error) bool {
	return IsKubernetesPodLookupError(err)
}

// KubernetesPodLookupErrorBuilder is a builder for "pod_lookup_error" errors.
type KubernetesPodLookupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "pod_lookup_error" from this builder.
func (b *KubernetesPodLookupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error looking up the pod",
		Technical: "there was an error looking up the pod",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "pod_lookup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     KubernetesSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Pod lookup error",
		Version:          1,
	}
}

// NewKubernetesPodLookupErrorBuilder creates a new error builder for the code "pod_lookup_error".
func NewKubernetesPodLookupErrorBuilder() *KubernetesPodLookupErrorBuilder {
	return &KubernetesPodLookupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewKubernetesPodLookupError creates a new error with the code "pod_lookup_error".
func NewKubernetesPodLookupError() Error {
	return NewKubernetesPodLookupErrorBuilder().Build()
}

// KubernetesPodNotFoundCode is the code for an instance of "pod_not_found".
const KubernetesPodNotFoundCode = "nt_kubernetes_pod_not_found"

// IsKubernetesPodNotFound tests whether a given error is an instance of "pod_not_found".
func IsKubernetesPodNotFound(err errawr.Error) bool {
	return err != nil && err.Is(KubernetesPodNotFoundCode)
}

// IsKubernetesPodNotFound tests whether a given error is an instance of "pod_not_found".
func (External) IsKubernetesPodNotFound(err errawr.Error) bool {
	return IsKubernetesPodNotFound(err)
}

// KubernetesPodNotFoundBuilder is a builder for "pod_not_found" errors.
type KubernetesPodNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "pod_not_found" from this builder.
func (b *KubernetesPodNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the pod was not found using the IP {{ ip }}",
		Technical: "the pod was not found using the IP {{ ip }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "pod_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     KubernetesSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Pod not found",
		Version:          1,
	}
}

// NewKubernetesPodNotFoundBuilder creates a new error builder for the code "pod_not_found".
func NewKubernetesPodNotFoundBuilder(ip string) *KubernetesPodNotFoundBuilder {
	return &KubernetesPodNotFoundBuilder{arguments: impl.ErrorArguments{"ip": impl.NewErrorArgument(ip, "the ip address used to lookup the pod")}}
}

// NewKubernetesPodNotFound creates a new error with the code "pod_not_found".
func NewKubernetesPodNotFound(ip string) Error {
	return NewKubernetesPodNotFoundBuilder(ip).Build()
}

// OutputsSection defines a section of errors with the following scope:
// Outputs errors
var OutputsSection = &impl.ErrorSection{
	Key:   "outputs",
	Title: "Outputs errors",
}

// OutputsGetErrorCode is the code for an instance of "get_error".
const OutputsGetErrorCode = "nt_outputs_get_error"

// IsOutputsGetError tests whether a given error is an instance of "get_error".
func IsOutputsGetError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsGetErrorCode)
}

// IsOutputsGetError tests whether a given error is an instance of "get_error".
func (External) IsOutputsGetError(err errawr.Error) bool {
	return IsOutputsGetError(err)
}

// OutputsGetErrorBuilder is a builder for "get_error" errors.
type OutputsGetErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_error" from this builder.
func (b *OutputsGetErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error getting the output",
		Technical: "there was an error getting the output",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get error",
		Version:          1,
	}
}

// NewOutputsGetErrorBuilder creates a new error builder for the code "get_error".
func NewOutputsGetErrorBuilder() *OutputsGetErrorBuilder {
	return &OutputsGetErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsGetError creates a new error with the code "get_error".
func NewOutputsGetError() Error {
	return NewOutputsGetErrorBuilder().Build()
}

// OutputsKeyEmptyErrorCode is the code for an instance of "key_empty_error".
const OutputsKeyEmptyErrorCode = "nt_outputs_key_empty_error"

// IsOutputsKeyEmptyError tests whether a given error is an instance of "key_empty_error".
func IsOutputsKeyEmptyError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsKeyEmptyErrorCode)
}

// IsOutputsKeyEmptyError tests whether a given error is an instance of "key_empty_error".
func (External) IsOutputsKeyEmptyError(err errawr.Error) bool {
	return IsOutputsKeyEmptyError(err)
}

// OutputsKeyEmptyErrorBuilder is a builder for "key_empty_error" errors.
type OutputsKeyEmptyErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "key_empty_error" from this builder.
func (b *OutputsKeyEmptyErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the output key was empty",
		Technical: "the output key was empty",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "key_empty_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Key empty error",
		Version:          1,
	}
}

// NewOutputsKeyEmptyErrorBuilder creates a new error builder for the code "key_empty_error".
func NewOutputsKeyEmptyErrorBuilder() *OutputsKeyEmptyErrorBuilder {
	return &OutputsKeyEmptyErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsKeyEmptyError creates a new error with the code "key_empty_error".
func NewOutputsKeyEmptyError() Error {
	return NewOutputsKeyEmptyErrorBuilder().Build()
}

// OutputsKeyNotFoundCode is the code for an instance of "key_not_found".
const OutputsKeyNotFoundCode = "nt_outputs_key_not_found"

// IsOutputsKeyNotFound tests whether a given error is an instance of "key_not_found".
func IsOutputsKeyNotFound(err errawr.Error) bool {
	return err != nil && err.Is(OutputsKeyNotFoundCode)
}

// IsOutputsKeyNotFound tests whether a given error is an instance of "key_not_found".
func (External) IsOutputsKeyNotFound(err errawr.Error) bool {
	return IsOutputsKeyNotFound(err)
}

// OutputsKeyNotFoundBuilder is a builder for "key_not_found" errors.
type OutputsKeyNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "key_not_found" from this builder.
func (b *OutputsKeyNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "key {{key}} was not found",
		Technical: "key {{key}} was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "key_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Key not found",
		Version:          1,
	}
}

// NewOutputsKeyNotFoundBuilder creates a new error builder for the code "key_not_found".
func NewOutputsKeyNotFoundBuilder(key string) *OutputsKeyNotFoundBuilder {
	return &OutputsKeyNotFoundBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key name that was not found")}}
}

// NewOutputsKeyNotFound creates a new error with the code "key_not_found".
func NewOutputsKeyNotFound(key string) Error {
	return NewOutputsKeyNotFoundBuilder(key).Build()
}

// OutputsPutErrorCode is the code for an instance of "put_error".
const OutputsPutErrorCode = "nt_outputs_put_error"

// IsOutputsPutError tests whether a given error is an instance of "put_error".
func IsOutputsPutError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsPutErrorCode)
}

// IsOutputsPutError tests whether a given error is an instance of "put_error".
func (External) IsOutputsPutError(err errawr.Error) bool {
	return IsOutputsPutError(err)
}

// OutputsPutErrorBuilder is a builder for "put_error" errors.
type OutputsPutErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "put_error" from this builder.
func (b *OutputsPutErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error storing the output",
		Technical: "there was an error storing the output",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "put_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Put error",
		Version:          1,
	}
}

// NewOutputsPutErrorBuilder creates a new error builder for the code "put_error".
func NewOutputsPutErrorBuilder() *OutputsPutErrorBuilder {
	return &OutputsPutErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsPutError creates a new error with the code "put_error".
func NewOutputsPutError() Error {
	return NewOutputsPutErrorBuilder().Build()
}

// OutputsTaskNotFoundCode is the code for an instance of "task_not_found".
const OutputsTaskNotFoundCode = "nt_outputs_task_not_found"

// IsOutputsTaskNotFound tests whether a given error is an instance of "task_not_found".
func IsOutputsTaskNotFound(err errawr.Error) bool {
	return err != nil && err.Is(OutputsTaskNotFoundCode)
}

// IsOutputsTaskNotFound tests whether a given error is an instance of "task_not_found".
func (External) IsOutputsTaskNotFound(err errawr.Error) bool {
	return IsOutputsTaskNotFound(err)
}

// OutputsTaskNotFoundBuilder is a builder for "task_not_found" errors.
type OutputsTaskNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "task_not_found" from this builder.
func (b *OutputsTaskNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "task {{task}} was not found",
		Technical: "task {{task}} was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "task_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Task not found",
		Version:          1,
	}
}

// NewOutputsTaskNotFoundBuilder creates a new error builder for the code "task_not_found".
func NewOutputsTaskNotFoundBuilder(task string) *OutputsTaskNotFoundBuilder {
	return &OutputsTaskNotFoundBuilder{arguments: impl.ErrorArguments{"task": impl.NewErrorArgument(task, "the task name that was not found")}}
}

// NewOutputsTaskNotFound creates a new error with the code "task_not_found".
func NewOutputsTaskNotFound(task string) Error {
	return NewOutputsTaskNotFoundBuilder(task).Build()
}

// OutputsValueDecodingErrorCode is the code for an instance of "value_decoding_error".
const OutputsValueDecodingErrorCode = "nt_outputs_value_decoding_error"

// IsOutputsValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func IsOutputsValueDecodingError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsValueDecodingErrorCode)
}

// IsOutputsValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func (External) IsOutputsValueDecodingError(err errawr.Error) bool {
	return IsOutputsValueDecodingError(err)
}

// OutputsValueDecodingErrorBuilder is a builder for "value_decoding_error" errors.
type OutputsValueDecodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_decoding_error" from this builder.
func (b *OutputsValueDecodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "decoding the secret value failed",
		Technical: "decoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_decoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value decoding error",
		Version:          1,
	}
}

// NewOutputsValueDecodingErrorBuilder creates a new error builder for the code "value_decoding_error".
func NewOutputsValueDecodingErrorBuilder() *OutputsValueDecodingErrorBuilder {
	return &OutputsValueDecodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsValueDecodingError creates a new error with the code "value_decoding_error".
func NewOutputsValueDecodingError() Error {
	return NewOutputsValueDecodingErrorBuilder().Build()
}

// OutputsValueEncodingErrorCode is the code for an instance of "value_encoding_error".
const OutputsValueEncodingErrorCode = "nt_outputs_value_encoding_error"

// IsOutputsValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func IsOutputsValueEncodingError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsValueEncodingErrorCode)
}

// IsOutputsValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func (External) IsOutputsValueEncodingError(err errawr.Error) bool {
	return IsOutputsValueEncodingError(err)
}

// OutputsValueEncodingErrorBuilder is a builder for "value_encoding_error" errors.
type OutputsValueEncodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_encoding_error" from this builder.
func (b *OutputsValueEncodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "encoding the secret value failed",
		Technical: "encoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_encoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value encoding error",
		Version:          1,
	}
}

// NewOutputsValueEncodingErrorBuilder creates a new error builder for the code "value_encoding_error".
func NewOutputsValueEncodingErrorBuilder() *OutputsValueEncodingErrorBuilder {
	return &OutputsValueEncodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsValueEncodingError creates a new error with the code "value_encoding_error".
func NewOutputsValueEncodingError() Error {
	return NewOutputsValueEncodingErrorBuilder().Build()
}

// OutputsValueReadErrorCode is the code for an instance of "value_read_error".
const OutputsValueReadErrorCode = "nt_outputs_value_read_error"

// IsOutputsValueReadError tests whether a given error is an instance of "value_read_error".
func IsOutputsValueReadError(err errawr.Error) bool {
	return err != nil && err.Is(OutputsValueReadErrorCode)
}

// IsOutputsValueReadError tests whether a given error is an instance of "value_read_error".
func (External) IsOutputsValueReadError(err errawr.Error) bool {
	return IsOutputsValueReadError(err)
}

// OutputsValueReadErrorBuilder is a builder for "value_read_error" errors.
type OutputsValueReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_read_error" from this builder.
func (b *OutputsValueReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error reading the value from the buffer",
		Technical: "there was an error reading the value from the buffer",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     OutputsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value read error",
		Version:          1,
	}
}

// NewOutputsValueReadErrorBuilder creates a new error builder for the code "value_read_error".
func NewOutputsValueReadErrorBuilder() *OutputsValueReadErrorBuilder {
	return &OutputsValueReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewOutputsValueReadError creates a new error with the code "value_read_error".
func NewOutputsValueReadError() Error {
	return NewOutputsValueReadErrorBuilder().Build()
}

// SecretsSection defines a section of errors with the following scope:
// Secrets errors
var SecretsSection = &impl.ErrorSection{
	Key:   "secrets",
	Title: "Secrets errors",
}

// SecretsGetErrorCode is the code for an instance of "get_error".
const SecretsGetErrorCode = "nt_secrets_get_error"

// IsSecretsGetError tests whether a given error is an instance of "get_error".
func IsSecretsGetError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsGetErrorCode)
}

// IsSecretsGetError tests whether a given error is an instance of "get_error".
func (External) IsSecretsGetError(err errawr.Error) bool {
	return IsSecretsGetError(err)
}

// SecretsGetErrorBuilder is a builder for "get_error" errors.
type SecretsGetErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_error" from this builder.
func (b *SecretsGetErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to get the secret at key {{key}}",
		Technical: "failed to get the secret at key {{key}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get error",
		Version:          1,
	}
}

// NewSecretsGetErrorBuilder creates a new error builder for the code "get_error".
func NewSecretsGetErrorBuilder(key string) *SecretsGetErrorBuilder {
	return &SecretsGetErrorBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key that had the failure")}}
}

// NewSecretsGetError creates a new error with the code "get_error".
func NewSecretsGetError(key string) Error {
	return NewSecretsGetErrorBuilder(key).Build()
}

// SecretsK8sServiceAccountTokenReadErrorCode is the code for an instance of "k8s_service_account_token_read_error".
const SecretsK8sServiceAccountTokenReadErrorCode = "nt_secrets_k8s_service_account_token_read_error"

// IsSecretsK8sServiceAccountTokenReadError tests whether a given error is an instance of "k8s_service_account_token_read_error".
func IsSecretsK8sServiceAccountTokenReadError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsK8sServiceAccountTokenReadErrorCode)
}

// IsSecretsK8sServiceAccountTokenReadError tests whether a given error is an instance of "k8s_service_account_token_read_error".
func (External) IsSecretsK8sServiceAccountTokenReadError(err errawr.Error) bool {
	return IsSecretsK8sServiceAccountTokenReadError(err)
}

// SecretsK8sServiceAccountTokenReadErrorBuilder is a builder for "k8s_service_account_token_read_error" errors.
type SecretsK8sServiceAccountTokenReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "k8s_service_account_token_read_error" from this builder.
func (b *SecretsK8sServiceAccountTokenReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error reading the service account token from the secret file",
		Technical: "there was an error reading the service account token from the secret file",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "k8s_service_account_token_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "K8s service account token read error",
		Version:          1,
	}
}

// NewSecretsK8sServiceAccountTokenReadErrorBuilder creates a new error builder for the code "k8s_service_account_token_read_error".
func NewSecretsK8sServiceAccountTokenReadErrorBuilder() *SecretsK8sServiceAccountTokenReadErrorBuilder {
	return &SecretsK8sServiceAccountTokenReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsK8sServiceAccountTokenReadError creates a new error with the code "k8s_service_account_token_read_error".
func NewSecretsK8sServiceAccountTokenReadError() Error {
	return NewSecretsK8sServiceAccountTokenReadErrorBuilder().Build()
}

// SecretsKeyNotFoundCode is the code for an instance of "key_not_found".
const SecretsKeyNotFoundCode = "nt_secrets_key_not_found"

// IsSecretsKeyNotFound tests whether a given error is an instance of "key_not_found".
func IsSecretsKeyNotFound(err errawr.Error) bool {
	return err != nil && err.Is(SecretsKeyNotFoundCode)
}

// IsSecretsKeyNotFound tests whether a given error is an instance of "key_not_found".
func (External) IsSecretsKeyNotFound(err errawr.Error) bool {
	return IsSecretsKeyNotFound(err)
}

// SecretsKeyNotFoundBuilder is a builder for "key_not_found" errors.
type SecretsKeyNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "key_not_found" from this builder.
func (b *SecretsKeyNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "key {{key}} not found",
		Technical: "key {{key}} not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "key_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Key not found",
		Version:          1,
	}
}

// NewSecretsKeyNotFoundBuilder creates a new error builder for the code "key_not_found".
func NewSecretsKeyNotFoundBuilder(key string) *SecretsKeyNotFoundBuilder {
	return &SecretsKeyNotFoundBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key that is missing")}}
}

// NewSecretsKeyNotFound creates a new error with the code "key_not_found".
func NewSecretsKeyNotFound(key string) Error {
	return NewSecretsKeyNotFoundBuilder(key).Build()
}

// SecretsMalformedValueCode is the code for an instance of "malformed_value".
const SecretsMalformedValueCode = "nt_secrets_malformed_value"

// IsSecretsMalformedValue tests whether a given error is an instance of "malformed_value".
func IsSecretsMalformedValue(err errawr.Error) bool {
	return err != nil && err.Is(SecretsMalformedValueCode)
}

// IsSecretsMalformedValue tests whether a given error is an instance of "malformed_value".
func (External) IsSecretsMalformedValue(err errawr.Error) bool {
	return IsSecretsMalformedValue(err)
}

// SecretsMalformedValueBuilder is a builder for "malformed_value" errors.
type SecretsMalformedValueBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "malformed_value" from this builder.
func (b *SecretsMalformedValueBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the value for secretRef is not a string",
		Technical: "the value for secretRef is not a string",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "malformed_value",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Malformed value",
		Version:          1,
	}
}

// NewSecretsMalformedValueBuilder creates a new error builder for the code "malformed_value".
func NewSecretsMalformedValueBuilder() *SecretsMalformedValueBuilder {
	return &SecretsMalformedValueBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsMalformedValue creates a new error with the code "malformed_value".
func NewSecretsMalformedValue() Error {
	return NewSecretsMalformedValueBuilder().Build()
}

// SecretsMissingSecretRefCode is the code for an instance of "missing_secret_ref".
const SecretsMissingSecretRefCode = "nt_secrets_missing_secret_ref"

// IsSecretsMissingSecretRef tests whether a given error is an instance of "missing_secret_ref".
func IsSecretsMissingSecretRef(err errawr.Error) bool {
	return err != nil && err.Is(SecretsMissingSecretRefCode)
}

// IsSecretsMissingSecretRef tests whether a given error is an instance of "missing_secret_ref".
func (External) IsSecretsMissingSecretRef(err errawr.Error) bool {
	return IsSecretsMissingSecretRef(err)
}

// SecretsMissingSecretRefBuilder is a builder for "missing_secret_ref" errors.
type SecretsMissingSecretRefBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_secret_ref" from this builder.
func (b *SecretsMissingSecretRefBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "secretRef is missing",
		Technical: "secretRef is missing",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_secret_ref",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing secretRef",
		Version:          1,
	}
}

// NewSecretsMissingSecretRefBuilder creates a new error builder for the code "missing_secret_ref".
func NewSecretsMissingSecretRefBuilder() *SecretsMissingSecretRefBuilder {
	return &SecretsMissingSecretRefBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsMissingSecretRef creates a new error with the code "missing_secret_ref".
func NewSecretsMissingSecretRef() Error {
	return NewSecretsMissingSecretRefBuilder().Build()
}

// SecretsSessionSetupErrorCode is the code for an instance of "session_setup_error".
const SecretsSessionSetupErrorCode = "nt_secrets_session_setup_error"

// IsSecretsSessionSetupError tests whether a given error is an instance of "session_setup_error".
func IsSecretsSessionSetupError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsSessionSetupErrorCode)
}

// IsSecretsSessionSetupError tests whether a given error is an instance of "session_setup_error".
func (External) IsSecretsSessionSetupError(err errawr.Error) bool {
	return IsSecretsSessionSetupError(err)
}

// SecretsSessionSetupErrorBuilder is a builder for "session_setup_error" errors.
type SecretsSessionSetupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "session_setup_error" from this builder.
func (b *SecretsSessionSetupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error setting up the secret engine session",
		Technical: "there was an error setting up the secret engine session",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "session_setup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Session setup error",
		Version:          1,
	}
}

// NewSecretsSessionSetupErrorBuilder creates a new error builder for the code "session_setup_error".
func NewSecretsSessionSetupErrorBuilder() *SecretsSessionSetupErrorBuilder {
	return &SecretsSessionSetupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsSessionSetupError creates a new error with the code "session_setup_error".
func NewSecretsSessionSetupError() Error {
	return NewSecretsSessionSetupErrorBuilder().Build()
}

// SecretsValueDecodingErrorCode is the code for an instance of "value_decoding_error".
const SecretsValueDecodingErrorCode = "nt_secrets_value_decoding_error"

// IsSecretsValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func IsSecretsValueDecodingError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsValueDecodingErrorCode)
}

// IsSecretsValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func (External) IsSecretsValueDecodingError(err errawr.Error) bool {
	return IsSecretsValueDecodingError(err)
}

// SecretsValueDecodingErrorBuilder is a builder for "value_decoding_error" errors.
type SecretsValueDecodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_decoding_error" from this builder.
func (b *SecretsValueDecodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "decoding the secret value failed",
		Technical: "decoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_decoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value decoding error",
		Version:          1,
	}
}

// NewSecretsValueDecodingErrorBuilder creates a new error builder for the code "value_decoding_error".
func NewSecretsValueDecodingErrorBuilder() *SecretsValueDecodingErrorBuilder {
	return &SecretsValueDecodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsValueDecodingError creates a new error with the code "value_decoding_error".
func NewSecretsValueDecodingError() Error {
	return NewSecretsValueDecodingErrorBuilder().Build()
}

// SecretsValueEncodingErrorCode is the code for an instance of "value_encoding_error".
const SecretsValueEncodingErrorCode = "nt_secrets_value_encoding_error"

// IsSecretsValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func IsSecretsValueEncodingError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsValueEncodingErrorCode)
}

// IsSecretsValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func (External) IsSecretsValueEncodingError(err errawr.Error) bool {
	return IsSecretsValueEncodingError(err)
}

// SecretsValueEncodingErrorBuilder is a builder for "value_encoding_error" errors.
type SecretsValueEncodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_encoding_error" from this builder.
func (b *SecretsValueEncodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "encoding the secret value failed",
		Technical: "encoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_encoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value encoding error",
		Version:          1,
	}
}

// NewSecretsValueEncodingErrorBuilder creates a new error builder for the code "value_encoding_error".
func NewSecretsValueEncodingErrorBuilder() *SecretsValueEncodingErrorBuilder {
	return &SecretsValueEncodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsValueEncodingError creates a new error with the code "value_encoding_error".
func NewSecretsValueEncodingError() Error {
	return NewSecretsValueEncodingErrorBuilder().Build()
}

// SecretsVaultAuthenticationNotConfiguredErrorCode is the code for an instance of "vault_authentication_not_configured_error".
const SecretsVaultAuthenticationNotConfiguredErrorCode = "nt_secrets_vault_authentication_not_configured_error"

// IsSecretsVaultAuthenticationNotConfiguredError tests whether a given error is an instance of "vault_authentication_not_configured_error".
func IsSecretsVaultAuthenticationNotConfiguredError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultAuthenticationNotConfiguredErrorCode)
}

// IsSecretsVaultAuthenticationNotConfiguredError tests whether a given error is an instance of "vault_authentication_not_configured_error".
func (External) IsSecretsVaultAuthenticationNotConfiguredError(err errawr.Error) bool {
	return IsSecretsVaultAuthenticationNotConfiguredError(err)
}

// SecretsVaultAuthenticationNotConfiguredErrorBuilder is a builder for "vault_authentication_not_configured_error" errors.
type SecretsVaultAuthenticationNotConfiguredErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_authentication_not_configured_error" from this builder.
func (b *SecretsVaultAuthenticationNotConfiguredErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "no vault token or service account path specified",
		Technical: "no vault token or service account path specified",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_authentication_not_configured_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault authentication not configured error",
		Version:          1,
	}
}

// NewSecretsVaultAuthenticationNotConfiguredErrorBuilder creates a new error builder for the code "vault_authentication_not_configured_error".
func NewSecretsVaultAuthenticationNotConfiguredErrorBuilder() *SecretsVaultAuthenticationNotConfiguredErrorBuilder {
	return &SecretsVaultAuthenticationNotConfiguredErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultAuthenticationNotConfiguredError creates a new error with the code "vault_authentication_not_configured_error".
func NewSecretsVaultAuthenticationNotConfiguredError() Error {
	return NewSecretsVaultAuthenticationNotConfiguredErrorBuilder().Build()
}

// SecretsVaultLoginErrorCode is the code for an instance of "vault_login_error".
const SecretsVaultLoginErrorCode = "nt_secrets_vault_login_error"

// IsSecretsVaultLoginError tests whether a given error is an instance of "vault_login_error".
func IsSecretsVaultLoginError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultLoginErrorCode)
}

// IsSecretsVaultLoginError tests whether a given error is an instance of "vault_login_error".
func (External) IsSecretsVaultLoginError(err errawr.Error) bool {
	return IsSecretsVaultLoginError(err)
}

// SecretsVaultLoginErrorBuilder is a builder for "vault_login_error" errors.
type SecretsVaultLoginErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_login_error" from this builder.
func (b *SecretsVaultLoginErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error logging into the vault server",
		Technical: "there was an error logging into the vault server",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_login_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault login error",
		Version:          1,
	}
}

// NewSecretsVaultLoginErrorBuilder creates a new error builder for the code "vault_login_error".
func NewSecretsVaultLoginErrorBuilder() *SecretsVaultLoginErrorBuilder {
	return &SecretsVaultLoginErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultLoginError creates a new error with the code "vault_login_error".
func NewSecretsVaultLoginError() Error {
	return NewSecretsVaultLoginErrorBuilder().Build()
}

// SecretsVaultSetupErrorCode is the code for an instance of "vault_setup_error".
const SecretsVaultSetupErrorCode = "nt_secrets_vault_setup_error"

// IsSecretsVaultSetupError tests whether a given error is an instance of "vault_setup_error".
func IsSecretsVaultSetupError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultSetupErrorCode)
}

// IsSecretsVaultSetupError tests whether a given error is an instance of "vault_setup_error".
func (External) IsSecretsVaultSetupError(err errawr.Error) bool {
	return IsSecretsVaultSetupError(err)
}

// SecretsVaultSetupErrorBuilder is a builder for "vault_setup_error" errors.
type SecretsVaultSetupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_setup_error" from this builder.
func (b *SecretsVaultSetupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error setting up the Vault client",
		Technical: "there was an error setting up the Vault client",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_setup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault client setup error",
		Version:          1,
	}
}

// NewSecretsVaultSetupErrorBuilder creates a new error builder for the code "vault_setup_error".
func NewSecretsVaultSetupErrorBuilder() *SecretsVaultSetupErrorBuilder {
	return &SecretsVaultSetupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultSetupError creates a new error with the code "vault_setup_error".
func NewSecretsVaultSetupError() Error {
	return NewSecretsVaultSetupErrorBuilder().Build()
}

// SecretsVaultTokenLookupErrorCode is the code for an instance of "vault_token_lookup_error".
const SecretsVaultTokenLookupErrorCode = "nt_secrets_vault_token_lookup_error"

// IsSecretsVaultTokenLookupError tests whether a given error is an instance of "vault_token_lookup_error".
func IsSecretsVaultTokenLookupError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultTokenLookupErrorCode)
}

// IsSecretsVaultTokenLookupError tests whether a given error is an instance of "vault_token_lookup_error".
func (External) IsSecretsVaultTokenLookupError(err errawr.Error) bool {
	return IsSecretsVaultTokenLookupError(err)
}

// SecretsVaultTokenLookupErrorBuilder is a builder for "vault_token_lookup_error" errors.
type SecretsVaultTokenLookupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_token_lookup_error" from this builder.
func (b *SecretsVaultTokenLookupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error looking up the current vault token",
		Technical: "there was an error looking up the current vault token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_token_lookup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault token lookup error",
		Version:          1,
	}
}

// NewSecretsVaultTokenLookupErrorBuilder creates a new error builder for the code "vault_token_lookup_error".
func NewSecretsVaultTokenLookupErrorBuilder() *SecretsVaultTokenLookupErrorBuilder {
	return &SecretsVaultTokenLookupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultTokenLookupError creates a new error with the code "vault_token_lookup_error".
func NewSecretsVaultTokenLookupError() Error {
	return NewSecretsVaultTokenLookupErrorBuilder().Build()
}

// SecretsVaultTokenNotRenewableErrorCode is the code for an instance of "vault_token_not_renewable_error".
const SecretsVaultTokenNotRenewableErrorCode = "nt_secrets_vault_token_not_renewable_error"

// IsSecretsVaultTokenNotRenewableError tests whether a given error is an instance of "vault_token_not_renewable_error".
func IsSecretsVaultTokenNotRenewableError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultTokenNotRenewableErrorCode)
}

// IsSecretsVaultTokenNotRenewableError tests whether a given error is an instance of "vault_token_not_renewable_error".
func (External) IsSecretsVaultTokenNotRenewableError(err errawr.Error) bool {
	return IsSecretsVaultTokenNotRenewableError(err)
}

// SecretsVaultTokenNotRenewableErrorBuilder is a builder for "vault_token_not_renewable_error" errors.
type SecretsVaultTokenNotRenewableErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_token_not_renewable_error" from this builder.
func (b *SecretsVaultTokenNotRenewableErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the vault token currently used for auth is not renewable",
		Technical: "the vault token currently used for auth is not renewable",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_token_not_renewable_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault token not renewable",
		Version:          1,
	}
}

// NewSecretsVaultTokenNotRenewableErrorBuilder creates a new error builder for the code "vault_token_not_renewable_error".
func NewSecretsVaultTokenNotRenewableErrorBuilder() *SecretsVaultTokenNotRenewableErrorBuilder {
	return &SecretsVaultTokenNotRenewableErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultTokenNotRenewableError creates a new error with the code "vault_token_not_renewable_error".
func NewSecretsVaultTokenNotRenewableError() Error {
	return NewSecretsVaultTokenNotRenewableErrorBuilder().Build()
}

// SecretsVaultTokenRenewErrorCode is the code for an instance of "vault_token_renew_error".
const SecretsVaultTokenRenewErrorCode = "nt_secrets_vault_token_renew_error"

// IsSecretsVaultTokenRenewError tests whether a given error is an instance of "vault_token_renew_error".
func IsSecretsVaultTokenRenewError(err errawr.Error) bool {
	return err != nil && err.Is(SecretsVaultTokenRenewErrorCode)
}

// IsSecretsVaultTokenRenewError tests whether a given error is an instance of "vault_token_renew_error".
func (External) IsSecretsVaultTokenRenewError(err errawr.Error) bool {
	return IsSecretsVaultTokenRenewError(err)
}

// SecretsVaultTokenRenewErrorBuilder is a builder for "vault_token_renew_error" errors.
type SecretsVaultTokenRenewErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "vault_token_renew_error" from this builder.
func (b *SecretsVaultTokenRenewErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to renew the vault token",
		Technical: "failed to renew the vault token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "vault_token_renew_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Vault token renew error",
		Version:          1,
	}
}

// NewSecretsVaultTokenRenewErrorBuilder creates a new error builder for the code "vault_token_renew_error".
func NewSecretsVaultTokenRenewErrorBuilder() *SecretsVaultTokenRenewErrorBuilder {
	return &SecretsVaultTokenRenewErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretsVaultTokenRenewError creates a new error with the code "vault_token_renew_error".
func NewSecretsVaultTokenRenewError() Error {
	return NewSecretsVaultTokenRenewErrorBuilder().Build()
}

// ServerSection defines a section of errors with the following scope:
// Server errors
var ServerSection = &impl.ErrorSection{
	Key:   "server",
	Title: "Server errors",
}

// ServerClientIPErrorCode is the code for an instance of "client_ip_error".
const ServerClientIPErrorCode = "nt_server_client_ip_error"

// IsServerClientIPError tests whether a given error is an instance of "client_ip_error".
func IsServerClientIPError(err errawr.Error) bool {
	return err != nil && err.Is(ServerClientIPErrorCode)
}

// IsServerClientIPError tests whether a given error is an instance of "client_ip_error".
func (External) IsServerClientIPError(err errawr.Error) bool {
	return IsServerClientIPError(err)
}

// ServerClientIPErrorBuilder is a builder for "client_ip_error" errors.
type ServerClientIPErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "client_ip_error" from this builder.
func (b *ServerClientIPErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "malformed client IP",
		Technical: "malformed client IP",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "client_ip_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  500,
		}},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Client IP error",
		Version:          1,
	}
}

// NewServerClientIPErrorBuilder creates a new error builder for the code "client_ip_error".
func NewServerClientIPErrorBuilder() *ServerClientIPErrorBuilder {
	return &ServerClientIPErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerClientIPError creates a new error with the code "client_ip_error".
func NewServerClientIPError() Error {
	return NewServerClientIPErrorBuilder().Build()
}

// ServerConfigMapJSONErrorCode is the code for an instance of "config_map_json_error".
const ServerConfigMapJSONErrorCode = "nt_server_config_map_json_error"

// IsServerConfigMapJSONError tests whether a given error is an instance of "config_map_json_error".
func IsServerConfigMapJSONError(err errawr.Error) bool {
	return err != nil && err.Is(ServerConfigMapJSONErrorCode)
}

// IsServerConfigMapJSONError tests whether a given error is an instance of "config_map_json_error".
func (External) IsServerConfigMapJSONError(err errawr.Error) bool {
	return IsServerConfigMapJSONError(err)
}

// ServerConfigMapJSONErrorBuilder is a builder for "config_map_json_error" errors.
type ServerConfigMapJSONErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "config_map_json_error" from this builder.
func (b *ServerConfigMapJSONErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "error when parsing the \"spec.json\" field of the {{namespace}}/{{name}} config map data",
		Technical: "error when parsing the \"spec.json\" field of the {{namespace}}/{{name}} config map data",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "config_map_json_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "ConfigMap spec.json parse error",
		Version:          1,
	}
}

// NewServerConfigMapJSONErrorBuilder creates a new error builder for the code "config_map_json_error".
func NewServerConfigMapJSONErrorBuilder(name string, namespace string) *ServerConfigMapJSONErrorBuilder {
	return &ServerConfigMapJSONErrorBuilder{arguments: impl.ErrorArguments{
		"name":      impl.NewErrorArgument(name, "The name of the config map"),
		"namespace": impl.NewErrorArgument(namespace, "The namespace of the config map"),
	}}
}

// NewServerConfigMapJSONError creates a new error with the code "config_map_json_error".
func NewServerConfigMapJSONError(name string, namespace string) Error {
	return NewServerConfigMapJSONErrorBuilder(name, namespace).Build()
}

// ServerGetConfigMapErrorCode is the code for an instance of "get_config_map_error".
const ServerGetConfigMapErrorCode = "nt_server_get_config_map_error"

// IsServerGetConfigMapError tests whether a given error is an instance of "get_config_map_error".
func IsServerGetConfigMapError(err errawr.Error) bool {
	return err != nil && err.Is(ServerGetConfigMapErrorCode)
}

// IsServerGetConfigMapError tests whether a given error is an instance of "get_config_map_error".
func (External) IsServerGetConfigMapError(err errawr.Error) bool {
	return IsServerGetConfigMapError(err)
}

// ServerGetConfigMapErrorBuilder is a builder for "get_config_map_error" errors.
type ServerGetConfigMapErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_config_map_error" from this builder.
func (b *ServerGetConfigMapErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "error when getting config map {{namespace}}/{{name}}",
		Technical: "error when getting config map {{namespace}}/{{name}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_config_map_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "ConfigMap GET failed",
		Version:          1,
	}
}

// NewServerGetConfigMapErrorBuilder creates a new error builder for the code "get_config_map_error".
func NewServerGetConfigMapErrorBuilder(name string, namespace string) *ServerGetConfigMapErrorBuilder {
	return &ServerGetConfigMapErrorBuilder{arguments: impl.ErrorArguments{
		"name":      impl.NewErrorArgument(name, "The name of the config map"),
		"namespace": impl.NewErrorArgument(namespace, "The namespace of the config map"),
	}}
}

// NewServerGetConfigMapError creates a new error with the code "get_config_map_error".
func NewServerGetConfigMapError(name string, namespace string) Error {
	return NewServerGetConfigMapErrorBuilder(name, namespace).Build()
}

// ServerInClusterConfigErrorCode is the code for an instance of "in_cluster_config_error".
const ServerInClusterConfigErrorCode = "nt_server_in_cluster_config_error"

// IsServerInClusterConfigError tests whether a given error is an instance of "in_cluster_config_error".
func IsServerInClusterConfigError(err errawr.Error) bool {
	return err != nil && err.Is(ServerInClusterConfigErrorCode)
}

// IsServerInClusterConfigError tests whether a given error is an instance of "in_cluster_config_error".
func (External) IsServerInClusterConfigError(err errawr.Error) bool {
	return IsServerInClusterConfigError(err)
}

// ServerInClusterConfigErrorBuilder is a builder for "in_cluster_config_error" errors.
type ServerInClusterConfigErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "in_cluster_config_error" from this builder.
func (b *ServerInClusterConfigErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "error fetching the in cluster config",
		Technical: "error fetching the in cluster config",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "in_cluster_config_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Config fetch error",
		Version:          1,
	}
}

// NewServerInClusterConfigErrorBuilder creates a new error builder for the code "in_cluster_config_error".
func NewServerInClusterConfigErrorBuilder() *ServerInClusterConfigErrorBuilder {
	return &ServerInClusterConfigErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerInClusterConfigError creates a new error with the code "in_cluster_config_error".
func NewServerInClusterConfigError() Error {
	return NewServerInClusterConfigErrorBuilder().Build()
}

// ServerJSONEncodingErrorCode is the code for an instance of "json_encoding_error".
const ServerJSONEncodingErrorCode = "nt_server_json_encoding_error"

// IsServerJSONEncodingError tests whether a given error is an instance of "json_encoding_error".
func IsServerJSONEncodingError(err errawr.Error) bool {
	return err != nil && err.Is(ServerJSONEncodingErrorCode)
}

// IsServerJSONEncodingError tests whether a given error is an instance of "json_encoding_error".
func (External) IsServerJSONEncodingError(err errawr.Error) bool {
	return IsServerJSONEncodingError(err)
}

// ServerJSONEncodingErrorBuilder is a builder for "json_encoding_error" errors.
type ServerJSONEncodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "json_encoding_error" from this builder.
func (b *ServerJSONEncodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Failed to encode JSON",
		Technical: "Failed to encode JSON",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "json_encoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "JSON encoding error",
		Version:          1,
	}
}

// NewServerJSONEncodingErrorBuilder creates a new error builder for the code "json_encoding_error".
func NewServerJSONEncodingErrorBuilder() *ServerJSONEncodingErrorBuilder {
	return &ServerJSONEncodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerJSONEncodingError creates a new error with the code "json_encoding_error".
func NewServerJSONEncodingError() Error {
	return NewServerJSONEncodingErrorBuilder().Build()
}

// ServerNewK8sClientErrorCode is the code for an instance of "new_k8s_client_error".
const ServerNewK8sClientErrorCode = "nt_server_new_k8s_client_error"

// IsServerNewK8sClientError tests whether a given error is an instance of "new_k8s_client_error".
func IsServerNewK8sClientError(err errawr.Error) bool {
	return err != nil && err.Is(ServerNewK8sClientErrorCode)
}

// IsServerNewK8sClientError tests whether a given error is an instance of "new_k8s_client_error".
func (External) IsServerNewK8sClientError(err errawr.Error) bool {
	return IsServerNewK8sClientError(err)
}

// ServerNewK8sClientErrorBuilder is a builder for "new_k8s_client_error" errors.
type ServerNewK8sClientErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "new_k8s_client_error" from this builder.
func (b *ServerNewK8sClientErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "error creating a Kubernetes client",
		Technical: "error creating a Kubernetes client",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "new_k8s_client_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Kubernetes client create error",
		Version:          1,
	}
}

// NewServerNewK8sClientErrorBuilder creates a new error builder for the code "new_k8s_client_error".
func NewServerNewK8sClientErrorBuilder() *ServerNewK8sClientErrorBuilder {
	return &ServerNewK8sClientErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerNewK8sClientError creates a new error with the code "new_k8s_client_error".
func NewServerNewK8sClientError() Error {
	return NewServerNewK8sClientErrorBuilder().Build()
}

// ServerOutputFetcherGetErrorCode is the code for an instance of "output_fetcher_get_error".
const ServerOutputFetcherGetErrorCode = "nt_server_output_fetcher_get_error"

// IsServerOutputFetcherGetError tests whether a given error is an instance of "output_fetcher_get_error".
func IsServerOutputFetcherGetError(err errawr.Error) bool {
	return err != nil && err.Is(ServerOutputFetcherGetErrorCode)
}

// IsServerOutputFetcherGetError tests whether a given error is an instance of "output_fetcher_get_error".
func (External) IsServerOutputFetcherGetError(err errawr.Error) bool {
	return IsServerOutputFetcherGetError(err)
}

// ServerOutputFetcherGetErrorBuilder is a builder for "output_fetcher_get_error" errors.
type ServerOutputFetcherGetErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "output_fetcher_get_error" from this builder.
func (b *ServerOutputFetcherGetErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetch the output value",
		Technical: "there was an error fetch the output value",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "output_fetcher_get_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Output fetcher get error",
		Version:          1,
	}
}

// NewServerOutputFetcherGetErrorBuilder creates a new error builder for the code "output_fetcher_get_error".
func NewServerOutputFetcherGetErrorBuilder() *ServerOutputFetcherGetErrorBuilder {
	return &ServerOutputFetcherGetErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerOutputFetcherGetError creates a new error with the code "output_fetcher_get_error".
func NewServerOutputFetcherGetError() Error {
	return NewServerOutputFetcherGetErrorBuilder().Build()
}

// ServerOutputFetcherNameValidationErrorCode is the code for an instance of "output_fetcher_name_validation_error".
const ServerOutputFetcherNameValidationErrorCode = "nt_server_output_fetcher_name_validation_error"

// IsServerOutputFetcherNameValidationError tests whether a given error is an instance of "output_fetcher_name_validation_error".
func IsServerOutputFetcherNameValidationError(err errawr.Error) bool {
	return err != nil && err.Is(ServerOutputFetcherNameValidationErrorCode)
}

// IsServerOutputFetcherNameValidationError tests whether a given error is an instance of "output_fetcher_name_validation_error".
func (External) IsServerOutputFetcherNameValidationError(err errawr.Error) bool {
	return IsServerOutputFetcherNameValidationError(err)
}

// ServerOutputFetcherNameValidationErrorBuilder is a builder for "output_fetcher_name_validation_error" errors.
type ServerOutputFetcherNameValidationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "output_fetcher_name_validation_error" from this builder.
func (b *ServerOutputFetcherNameValidationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "name was missing or invalid",
		Technical: "name was missing or invalid",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "output_fetcher_name_validation_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Output fetcher name validation error",
		Version:          1,
	}
}

// NewServerOutputFetcherNameValidationErrorBuilder creates a new error builder for the code "output_fetcher_name_validation_error".
func NewServerOutputFetcherNameValidationErrorBuilder() *ServerOutputFetcherNameValidationErrorBuilder {
	return &ServerOutputFetcherNameValidationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerOutputFetcherNameValidationError creates a new error with the code "output_fetcher_name_validation_error".
func NewServerOutputFetcherNameValidationError() Error {
	return NewServerOutputFetcherNameValidationErrorBuilder().Build()
}

// ServerOutputFetcherTaskNameValidationErrorCode is the code for an instance of "output_fetcher_task_name_validation_error".
const ServerOutputFetcherTaskNameValidationErrorCode = "nt_server_output_fetcher_task_name_validation_error"

// IsServerOutputFetcherTaskNameValidationError tests whether a given error is an instance of "output_fetcher_task_name_validation_error".
func IsServerOutputFetcherTaskNameValidationError(err errawr.Error) bool {
	return err != nil && err.Is(ServerOutputFetcherTaskNameValidationErrorCode)
}

// IsServerOutputFetcherTaskNameValidationError tests whether a given error is an instance of "output_fetcher_task_name_validation_error".
func (External) IsServerOutputFetcherTaskNameValidationError(err errawr.Error) bool {
	return IsServerOutputFetcherTaskNameValidationError(err)
}

// ServerOutputFetcherTaskNameValidationErrorBuilder is a builder for "output_fetcher_task_name_validation_error" errors.
type ServerOutputFetcherTaskNameValidationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "output_fetcher_task_name_validation_error" from this builder.
func (b *ServerOutputFetcherTaskNameValidationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "taskName was missing or invalid",
		Technical: "taskName was missing or invalid",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "output_fetcher_task_name_validation_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Output fetcher task name validation error",
		Version:          1,
	}
}

// NewServerOutputFetcherTaskNameValidationErrorBuilder creates a new error builder for the code "output_fetcher_task_name_validation_error".
func NewServerOutputFetcherTaskNameValidationErrorBuilder() *ServerOutputFetcherTaskNameValidationErrorBuilder {
	return &ServerOutputFetcherTaskNameValidationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerOutputFetcherTaskNameValidationError creates a new error with the code "output_fetcher_task_name_validation_error".
func NewServerOutputFetcherTaskNameValidationError() Error {
	return NewServerOutputFetcherTaskNameValidationErrorBuilder().Build()
}

// ServerPreConfigDecodingErrorCode is the code for an instance of "pre_config_decoding_error".
const ServerPreConfigDecodingErrorCode = "nt_server_pre_config_decoding_error"

// IsServerPreConfigDecodingError tests whether a given error is an instance of "pre_config_decoding_error".
func IsServerPreConfigDecodingError(err errawr.Error) bool {
	return err != nil && err.Is(ServerPreConfigDecodingErrorCode)
}

// IsServerPreConfigDecodingError tests whether a given error is an instance of "pre_config_decoding_error".
func (External) IsServerPreConfigDecodingError(err errawr.Error) bool {
	return IsServerPreConfigDecodingError(err)
}

// ServerPreConfigDecodingErrorBuilder is a builder for "pre_config_decoding_error" errors.
type ServerPreConfigDecodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "pre_config_decoding_error" from this builder.
func (b *ServerPreConfigDecodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error decoding the development preconfiguration file",
		Technical: "there was an error decoding the development preconfiguration file",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "pre_config_decoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "PreConfig decoding error",
		Version:          1,
	}
}

// NewServerPreConfigDecodingErrorBuilder creates a new error builder for the code "pre_config_decoding_error".
func NewServerPreConfigDecodingErrorBuilder() *ServerPreConfigDecodingErrorBuilder {
	return &ServerPreConfigDecodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerPreConfigDecodingError creates a new error with the code "pre_config_decoding_error".
func NewServerPreConfigDecodingError() Error {
	return NewServerPreConfigDecodingErrorBuilder().Build()
}

// ServerRunErrorCode is the code for an instance of "run_error".
const ServerRunErrorCode = "nt_server_run_error"

// IsServerRunError tests whether a given error is an instance of "run_error".
func IsServerRunError(err errawr.Error) bool {
	return err != nil && err.Is(ServerRunErrorCode)
}

// IsServerRunError tests whether a given error is an instance of "run_error".
func (External) IsServerRunError(err errawr.Error) bool {
	return IsServerRunError(err)
}

// ServerRunErrorBuilder is a builder for "run_error" errors.
type ServerRunErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "run_error" from this builder.
func (b *ServerRunErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "an error occurred which running the server",
		Technical: "an error occurred which running the server",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "run_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Run error",
		Version:          1,
	}
}

// NewServerRunErrorBuilder creates a new error builder for the code "run_error".
func NewServerRunErrorBuilder() *ServerRunErrorBuilder {
	return &ServerRunErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerRunError creates a new error with the code "run_error".
func NewServerRunError() Error {
	return NewServerRunErrorBuilder().Build()
}

// ServerSecretFetcherGetErrorCode is the code for an instance of "secret_fetcher_get_error".
const ServerSecretFetcherGetErrorCode = "nt_server_secret_fetcher_get_error"

// IsServerSecretFetcherGetError tests whether a given error is an instance of "secret_fetcher_get_error".
func IsServerSecretFetcherGetError(err errawr.Error) bool {
	return err != nil && err.Is(ServerSecretFetcherGetErrorCode)
}

// IsServerSecretFetcherGetError tests whether a given error is an instance of "secret_fetcher_get_error".
func (External) IsServerSecretFetcherGetError(err errawr.Error) bool {
	return IsServerSecretFetcherGetError(err)
}

// ServerSecretFetcherGetErrorBuilder is a builder for "secret_fetcher_get_error" errors.
type ServerSecretFetcherGetErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "secret_fetcher_get_error" from this builder.
func (b *ServerSecretFetcherGetErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetch the secret value",
		Technical: "there was an error fetch the secret value",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "secret_fetcher_get_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Secret fetcher get error",
		Version:          1,
	}
}

// NewServerSecretFetcherGetErrorBuilder creates a new error builder for the code "secret_fetcher_get_error".
func NewServerSecretFetcherGetErrorBuilder() *ServerSecretFetcherGetErrorBuilder {
	return &ServerSecretFetcherGetErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerSecretFetcherGetError creates a new error with the code "secret_fetcher_get_error".
func NewServerSecretFetcherGetError() Error {
	return NewServerSecretFetcherGetErrorBuilder().Build()
}

// ServerSecretFetcherNameValidationErrorCode is the code for an instance of "secret_fetcher_name_validation_error".
const ServerSecretFetcherNameValidationErrorCode = "nt_server_secret_fetcher_name_validation_error"

// IsServerSecretFetcherNameValidationError tests whether a given error is an instance of "secret_fetcher_name_validation_error".
func IsServerSecretFetcherNameValidationError(err errawr.Error) bool {
	return err != nil && err.Is(ServerSecretFetcherNameValidationErrorCode)
}

// IsServerSecretFetcherNameValidationError tests whether a given error is an instance of "secret_fetcher_name_validation_error".
func (External) IsServerSecretFetcherNameValidationError(err errawr.Error) bool {
	return IsServerSecretFetcherNameValidationError(err)
}

// ServerSecretFetcherNameValidationErrorBuilder is a builder for "secret_fetcher_name_validation_error" errors.
type ServerSecretFetcherNameValidationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "secret_fetcher_name_validation_error" from this builder.
func (b *ServerSecretFetcherNameValidationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "name was missing or invalid",
		Technical: "name was missing or invalid",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "secret_fetcher_name_validation_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ServerSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Secret fetcher name validation error",
		Version:          1,
	}
}

// NewServerSecretFetcherNameValidationErrorBuilder creates a new error builder for the code "secret_fetcher_name_validation_error".
func NewServerSecretFetcherNameValidationErrorBuilder() *ServerSecretFetcherNameValidationErrorBuilder {
	return &ServerSecretFetcherNameValidationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewServerSecretFetcherNameValidationError creates a new error with the code "secret_fetcher_name_validation_error".
func NewServerSecretFetcherNameValidationError() Error {
	return NewServerSecretFetcherNameValidationErrorBuilder().Build()
}

// StateSection defines a section of errors with the following scope:
// State errors
var StateSection = &impl.ErrorSection{
	Key:   "state",
	Title: "State errors",
}

// StateGetErrorCode is the code for an instance of "get_error".
const StateGetErrorCode = "nt_state_get_error"

// IsStateGetError tests whether a given error is an instance of "get_error".
func IsStateGetError(err errawr.Error) bool {
	return err != nil && err.Is(StateGetErrorCode)
}

// IsStateGetError tests whether a given error is an instance of "get_error".
func (External) IsStateGetError(err errawr.Error) bool {
	return IsStateGetError(err)
}

// StateGetErrorBuilder is a builder for "get_error" errors.
type StateGetErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_error" from this builder.
func (b *StateGetErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error getting the output",
		Technical: "there was an error getting the output",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get error",
		Version:          1,
	}
}

// NewStateGetErrorBuilder creates a new error builder for the code "get_error".
func NewStateGetErrorBuilder() *StateGetErrorBuilder {
	return &StateGetErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStateGetError creates a new error with the code "get_error".
func NewStateGetError() Error {
	return NewStateGetErrorBuilder().Build()
}

// StateKeyEmptyErrorCode is the code for an instance of "key_empty_error".
const StateKeyEmptyErrorCode = "nt_state_key_empty_error"

// IsStateKeyEmptyError tests whether a given error is an instance of "key_empty_error".
func IsStateKeyEmptyError(err errawr.Error) bool {
	return err != nil && err.Is(StateKeyEmptyErrorCode)
}

// IsStateKeyEmptyError tests whether a given error is an instance of "key_empty_error".
func (External) IsStateKeyEmptyError(err errawr.Error) bool {
	return IsStateKeyEmptyError(err)
}

// StateKeyEmptyErrorBuilder is a builder for "key_empty_error" errors.
type StateKeyEmptyErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "key_empty_error" from this builder.
func (b *StateKeyEmptyErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the output key was empty",
		Technical: "the output key was empty",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "key_empty_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Key empty error",
		Version:          1,
	}
}

// NewStateKeyEmptyErrorBuilder creates a new error builder for the code "key_empty_error".
func NewStateKeyEmptyErrorBuilder() *StateKeyEmptyErrorBuilder {
	return &StateKeyEmptyErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStateKeyEmptyError creates a new error with the code "key_empty_error".
func NewStateKeyEmptyError() Error {
	return NewStateKeyEmptyErrorBuilder().Build()
}

// StateKeyNotFoundCode is the code for an instance of "key_not_found".
const StateKeyNotFoundCode = "nt_state_key_not_found"

// IsStateKeyNotFound tests whether a given error is an instance of "key_not_found".
func IsStateKeyNotFound(err errawr.Error) bool {
	return err != nil && err.Is(StateKeyNotFoundCode)
}

// IsStateKeyNotFound tests whether a given error is an instance of "key_not_found".
func (External) IsStateKeyNotFound(err errawr.Error) bool {
	return IsStateKeyNotFound(err)
}

// StateKeyNotFoundBuilder is a builder for "key_not_found" errors.
type StateKeyNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "key_not_found" from this builder.
func (b *StateKeyNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "key {{key}} was not found",
		Technical: "key {{key}} was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "key_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Key not found",
		Version:          1,
	}
}

// NewStateKeyNotFoundBuilder creates a new error builder for the code "key_not_found".
func NewStateKeyNotFoundBuilder(key string) *StateKeyNotFoundBuilder {
	return &StateKeyNotFoundBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key name that was not found")}}
}

// NewStateKeyNotFound creates a new error with the code "key_not_found".
func NewStateKeyNotFound(key string) Error {
	return NewStateKeyNotFoundBuilder(key).Build()
}

// StatePutErrorCode is the code for an instance of "put_error".
const StatePutErrorCode = "nt_state_put_error"

// IsStatePutError tests whether a given error is an instance of "put_error".
func IsStatePutError(err errawr.Error) bool {
	return err != nil && err.Is(StatePutErrorCode)
}

// IsStatePutError tests whether a given error is an instance of "put_error".
func (External) IsStatePutError(err errawr.Error) bool {
	return IsStatePutError(err)
}

// StatePutErrorBuilder is a builder for "put_error" errors.
type StatePutErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "put_error" from this builder.
func (b *StatePutErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error storing the output",
		Technical: "there was an error storing the output",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "put_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Put error",
		Version:          1,
	}
}

// NewStatePutErrorBuilder creates a new error builder for the code "put_error".
func NewStatePutErrorBuilder() *StatePutErrorBuilder {
	return &StatePutErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStatePutError creates a new error with the code "put_error".
func NewStatePutError() Error {
	return NewStatePutErrorBuilder().Build()
}

// StateTaskNotFoundCode is the code for an instance of "task_not_found".
const StateTaskNotFoundCode = "nt_state_task_not_found"

// IsStateTaskNotFound tests whether a given error is an instance of "task_not_found".
func IsStateTaskNotFound(err errawr.Error) bool {
	return err != nil && err.Is(StateTaskNotFoundCode)
}

// IsStateTaskNotFound tests whether a given error is an instance of "task_not_found".
func (External) IsStateTaskNotFound(err errawr.Error) bool {
	return IsStateTaskNotFound(err)
}

// StateTaskNotFoundBuilder is a builder for "task_not_found" errors.
type StateTaskNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "task_not_found" from this builder.
func (b *StateTaskNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "task {{task}} was not found",
		Technical: "task {{task}} was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "task_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Task not found",
		Version:          1,
	}
}

// NewStateTaskNotFoundBuilder creates a new error builder for the code "task_not_found".
func NewStateTaskNotFoundBuilder(task string) *StateTaskNotFoundBuilder {
	return &StateTaskNotFoundBuilder{arguments: impl.ErrorArguments{"task": impl.NewErrorArgument(task, "the task name that was not found")}}
}

// NewStateTaskNotFound creates a new error with the code "task_not_found".
func NewStateTaskNotFound(task string) Error {
	return NewStateTaskNotFoundBuilder(task).Build()
}

// StateValueDecodingErrorCode is the code for an instance of "value_decoding_error".
const StateValueDecodingErrorCode = "nt_state_value_decoding_error"

// IsStateValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func IsStateValueDecodingError(err errawr.Error) bool {
	return err != nil && err.Is(StateValueDecodingErrorCode)
}

// IsStateValueDecodingError tests whether a given error is an instance of "value_decoding_error".
func (External) IsStateValueDecodingError(err errawr.Error) bool {
	return IsStateValueDecodingError(err)
}

// StateValueDecodingErrorBuilder is a builder for "value_decoding_error" errors.
type StateValueDecodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_decoding_error" from this builder.
func (b *StateValueDecodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "decoding the secret value failed",
		Technical: "decoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_decoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value decoding error",
		Version:          1,
	}
}

// NewStateValueDecodingErrorBuilder creates a new error builder for the code "value_decoding_error".
func NewStateValueDecodingErrorBuilder() *StateValueDecodingErrorBuilder {
	return &StateValueDecodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStateValueDecodingError creates a new error with the code "value_decoding_error".
func NewStateValueDecodingError() Error {
	return NewStateValueDecodingErrorBuilder().Build()
}

// StateValueEncodingErrorCode is the code for an instance of "value_encoding_error".
const StateValueEncodingErrorCode = "nt_state_value_encoding_error"

// IsStateValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func IsStateValueEncodingError(err errawr.Error) bool {
	return err != nil && err.Is(StateValueEncodingErrorCode)
}

// IsStateValueEncodingError tests whether a given error is an instance of "value_encoding_error".
func (External) IsStateValueEncodingError(err errawr.Error) bool {
	return IsStateValueEncodingError(err)
}

// StateValueEncodingErrorBuilder is a builder for "value_encoding_error" errors.
type StateValueEncodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_encoding_error" from this builder.
func (b *StateValueEncodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "encoding the secret value failed",
		Technical: "encoding the secret value failed",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_encoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value encoding error",
		Version:          1,
	}
}

// NewStateValueEncodingErrorBuilder creates a new error builder for the code "value_encoding_error".
func NewStateValueEncodingErrorBuilder() *StateValueEncodingErrorBuilder {
	return &StateValueEncodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStateValueEncodingError creates a new error with the code "value_encoding_error".
func NewStateValueEncodingError() Error {
	return NewStateValueEncodingErrorBuilder().Build()
}

// StateValueReadErrorCode is the code for an instance of "value_read_error".
const StateValueReadErrorCode = "nt_state_value_read_error"

// IsStateValueReadError tests whether a given error is an instance of "value_read_error".
func IsStateValueReadError(err errawr.Error) bool {
	return err != nil && err.Is(StateValueReadErrorCode)
}

// IsStateValueReadError tests whether a given error is an instance of "value_read_error".
func (External) IsStateValueReadError(err errawr.Error) bool {
	return IsStateValueReadError(err)
}

// StateValueReadErrorBuilder is a builder for "value_read_error" errors.
type StateValueReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "value_read_error" from this builder.
func (b *StateValueReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error reading the value from the buffer",
		Technical: "there was an error reading the value from the buffer",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "value_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     StateSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Value read error",
		Version:          1,
	}
}

// NewStateValueReadErrorBuilder creates a new error builder for the code "value_read_error".
func NewStateValueReadErrorBuilder() *StateValueReadErrorBuilder {
	return &StateValueReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewStateValueReadError creates a new error with the code "value_read_error".
func NewStateValueReadError() Error {
	return NewStateValueReadErrorBuilder().Build()
}

// TaskSection defines a section of errors with the following scope:
// Task errors
var TaskSection = &impl.ErrorSection{
	Key:   "task",
	Title: "Task errors",
}

// TaskConditionalsLookupErrorCode is the code for an instance of "conditionals_lookup_error".
const TaskConditionalsLookupErrorCode = "nt_task_conditionals_lookup_error"

// IsTaskConditionalsLookupError tests whether a given error is an instance of "conditionals_lookup_error".
func IsTaskConditionalsLookupError(err errawr.Error) bool {
	return err != nil && err.Is(TaskConditionalsLookupErrorCode)
}

// IsTaskConditionalsLookupError tests whether a given error is an instance of "conditionals_lookup_error".
func (External) IsTaskConditionalsLookupError(err errawr.Error) bool {
	return IsTaskConditionalsLookupError(err)
}

// TaskConditionalsLookupErrorBuilder is a builder for "conditionals_lookup_error" errors.
type TaskConditionalsLookupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "conditionals_lookup_error" from this builder.
func (b *TaskConditionalsLookupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to lookup task conditionals",
		Technical: "failed to lookup task conditionals",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "conditionals_lookup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  500,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Conditionals lookup error",
		Version:          1,
	}
}

// NewTaskConditionalsLookupErrorBuilder creates a new error builder for the code "conditionals_lookup_error".
func NewTaskConditionalsLookupErrorBuilder() *TaskConditionalsLookupErrorBuilder {
	return &TaskConditionalsLookupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewTaskConditionalsLookupError creates a new error with the code "conditionals_lookup_error".
func NewTaskConditionalsLookupError() Error {
	return NewTaskConditionalsLookupErrorBuilder().Build()
}

// TaskConditionalsNotFoundForIDCode is the code for an instance of "conditionals_not_found_for_id".
const TaskConditionalsNotFoundForIDCode = "nt_task_conditionals_not_found_for_id"

// IsTaskConditionalsNotFoundForID tests whether a given error is an instance of "conditionals_not_found_for_id".
func IsTaskConditionalsNotFoundForID(err errawr.Error) bool {
	return err != nil && err.Is(TaskConditionalsNotFoundForIDCode)
}

// IsTaskConditionalsNotFoundForID tests whether a given error is an instance of "conditionals_not_found_for_id".
func (External) IsTaskConditionalsNotFoundForID(err errawr.Error) bool {
	return IsTaskConditionalsNotFoundForID(err)
}

// TaskConditionalsNotFoundForIDBuilder is a builder for "conditionals_not_found_for_id" errors.
type TaskConditionalsNotFoundForIDBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "conditionals_not_found_for_id" from this builder.
func (b *TaskConditionalsNotFoundForIDBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "no task conditionals was found for ID {{id}}",
		Technical: "no task conditionals was found for ID {{id}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "conditionals_not_found_for_id",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Conditionals not found for ID",
		Version:          1,
	}
}

// NewTaskConditionalsNotFoundForIDBuilder creates a new error builder for the code "conditionals_not_found_for_id".
func NewTaskConditionalsNotFoundForIDBuilder(id string) *TaskConditionalsNotFoundForIDBuilder {
	return &TaskConditionalsNotFoundForIDBuilder{arguments: impl.ErrorArguments{"id": impl.NewErrorArgument(id, "the id of the task")}}
}

// NewTaskConditionalsNotFoundForID creates a new error with the code "conditionals_not_found_for_id".
func NewTaskConditionalsNotFoundForID(id string) Error {
	return NewTaskConditionalsNotFoundForIDBuilder(id).Build()
}

// TaskInvalidHashErrorCode is the code for an instance of "invalid_hash_error".
const TaskInvalidHashErrorCode = "nt_task_invalid_hash_error"

// IsTaskInvalidHashError tests whether a given error is an instance of "invalid_hash_error".
func IsTaskInvalidHashError(err errawr.Error) bool {
	return err != nil && err.Is(TaskInvalidHashErrorCode)
}

// IsTaskInvalidHashError tests whether a given error is an instance of "invalid_hash_error".
func (External) IsTaskInvalidHashError(err errawr.Error) bool {
	return IsTaskInvalidHashError(err)
}

// TaskInvalidHashErrorBuilder is a builder for "invalid_hash_error" errors.
type TaskInvalidHashErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_hash_error" from this builder.
func (b *TaskInvalidHashErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the task does not have a valid hash associated with it",
		Technical: "the task does not have a valid hash associated with it",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_hash_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid hash",
		Version:          1,
	}
}

// NewTaskInvalidHashErrorBuilder creates a new error builder for the code "invalid_hash_error".
func NewTaskInvalidHashErrorBuilder() *TaskInvalidHashErrorBuilder {
	return &TaskInvalidHashErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewTaskInvalidHashError creates a new error with the code "invalid_hash_error".
func NewTaskInvalidHashError() Error {
	return NewTaskInvalidHashErrorBuilder().Build()
}

// TaskNotFoundForIPCode is the code for an instance of "not_found_for_ip".
const TaskNotFoundForIPCode = "nt_task_not_found_for_ip"

// IsTaskNotFoundForIP tests whether a given error is an instance of "not_found_for_ip".
func IsTaskNotFoundForIP(err errawr.Error) bool {
	return err != nil && err.Is(TaskNotFoundForIPCode)
}

// IsTaskNotFoundForIP tests whether a given error is an instance of "not_found_for_ip".
func (External) IsTaskNotFoundForIP(err errawr.Error) bool {
	return IsTaskNotFoundForIP(err)
}

// TaskNotFoundForIPBuilder is a builder for "not_found_for_ip" errors.
type TaskNotFoundForIPBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "not_found_for_ip" from this builder.
func (b *TaskNotFoundForIPBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "no task was found for IP address {{ip}}",
		Technical: "no task was found for IP address {{ip}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "not_found_for_ip",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Not found for IP",
		Version:          1,
	}
}

// NewTaskNotFoundForIPBuilder creates a new error builder for the code "not_found_for_ip".
func NewTaskNotFoundForIPBuilder(ip string) *TaskNotFoundForIPBuilder {
	return &TaskNotFoundForIPBuilder{arguments: impl.ErrorArguments{"ip": impl.NewErrorArgument(ip, "the ip address used in the request")}}
}

// NewTaskNotFoundForIP creates a new error with the code "not_found_for_ip".
func NewTaskNotFoundForIP(ip string) Error {
	return NewTaskNotFoundForIPBuilder(ip).Build()
}

// TaskSpecDecodingErrorCode is the code for an instance of "spec_decoding_error".
const TaskSpecDecodingErrorCode = "nt_task_spec_decoding_error"

// IsTaskSpecDecodingError tests whether a given error is an instance of "spec_decoding_error".
func IsTaskSpecDecodingError(err errawr.Error) bool {
	return err != nil && err.Is(TaskSpecDecodingErrorCode)
}

// IsTaskSpecDecodingError tests whether a given error is an instance of "spec_decoding_error".
func (External) IsTaskSpecDecodingError(err errawr.Error) bool {
	return IsTaskSpecDecodingError(err)
}

// TaskSpecDecodingErrorBuilder is a builder for "spec_decoding_error" errors.
type TaskSpecDecodingErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "spec_decoding_error" from this builder.
func (b *TaskSpecDecodingErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to decode spec data",
		Technical: "failed to decode spec data",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "spec_decoding_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  500,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Spec decoding error",
		Version:          1,
	}
}

// NewTaskSpecDecodingErrorBuilder creates a new error builder for the code "spec_decoding_error".
func NewTaskSpecDecodingErrorBuilder() *TaskSpecDecodingErrorBuilder {
	return &TaskSpecDecodingErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewTaskSpecDecodingError creates a new error with the code "spec_decoding_error".
func NewTaskSpecDecodingError() Error {
	return NewTaskSpecDecodingErrorBuilder().Build()
}

// TaskSpecEvaluationErrorCode is the code for an instance of "spec_evaluation_error".
const TaskSpecEvaluationErrorCode = "nt_task_spec_evaluation_error"

// IsTaskSpecEvaluationError tests whether a given error is an instance of "spec_evaluation_error".
func IsTaskSpecEvaluationError(err errawr.Error) bool {
	return err != nil && err.Is(TaskSpecEvaluationErrorCode)
}

// IsTaskSpecEvaluationError tests whether a given error is an instance of "spec_evaluation_error".
func (External) IsTaskSpecEvaluationError(err errawr.Error) bool {
	return IsTaskSpecEvaluationError(err)
}

// TaskSpecEvaluationErrorBuilder is a builder for "spec_evaluation_error" errors.
type TaskSpecEvaluationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "spec_evaluation_error" from this builder.
func (b *TaskSpecEvaluationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to evaluate the step specification",
		Technical: "failed to evaluate the step specification",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "spec_evaluation_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Evaluation error",
		Version:          1,
	}
}

// NewTaskSpecEvaluationErrorBuilder creates a new error builder for the code "spec_evaluation_error".
func NewTaskSpecEvaluationErrorBuilder() *TaskSpecEvaluationErrorBuilder {
	return &TaskSpecEvaluationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewTaskSpecEvaluationError creates a new error with the code "spec_evaluation_error".
func NewTaskSpecEvaluationError() Error {
	return NewTaskSpecEvaluationErrorBuilder().Build()
}

// TaskSpecLookupErrorCode is the code for an instance of "spec_lookup_error".
const TaskSpecLookupErrorCode = "nt_task_spec_lookup_error"

// IsTaskSpecLookupError tests whether a given error is an instance of "spec_lookup_error".
func IsTaskSpecLookupError(err errawr.Error) bool {
	return err != nil && err.Is(TaskSpecLookupErrorCode)
}

// IsTaskSpecLookupError tests whether a given error is an instance of "spec_lookup_error".
func (External) IsTaskSpecLookupError(err errawr.Error) bool {
	return IsTaskSpecLookupError(err)
}

// TaskSpecLookupErrorBuilder is a builder for "spec_lookup_error" errors.
type TaskSpecLookupErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "spec_lookup_error" from this builder.
func (b *TaskSpecLookupErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "failed to lookup task spec",
		Technical: "failed to lookup task spec",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "spec_lookup_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  500,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Spec lookup error",
		Version:          1,
	}
}

// NewTaskSpecLookupErrorBuilder creates a new error builder for the code "spec_lookup_error".
func NewTaskSpecLookupErrorBuilder() *TaskSpecLookupErrorBuilder {
	return &TaskSpecLookupErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewTaskSpecLookupError creates a new error with the code "spec_lookup_error".
func NewTaskSpecLookupError() Error {
	return NewTaskSpecLookupErrorBuilder().Build()
}

// TaskSpecNotFoundForIDCode is the code for an instance of "spec_not_found_for_id".
const TaskSpecNotFoundForIDCode = "nt_task_spec_not_found_for_id"

// IsTaskSpecNotFoundForID tests whether a given error is an instance of "spec_not_found_for_id".
func IsTaskSpecNotFoundForID(err errawr.Error) bool {
	return err != nil && err.Is(TaskSpecNotFoundForIDCode)
}

// IsTaskSpecNotFoundForID tests whether a given error is an instance of "spec_not_found_for_id".
func (External) IsTaskSpecNotFoundForID(err errawr.Error) bool {
	return IsTaskSpecNotFoundForID(err)
}

// TaskSpecNotFoundForIDBuilder is a builder for "spec_not_found_for_id" errors.
type TaskSpecNotFoundForIDBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "spec_not_found_for_id" from this builder.
func (b *TaskSpecNotFoundForIDBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "no task spec was found for ID {{id}}",
		Technical: "no task spec was found for ID {{id}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "spec_not_found_for_id",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  404,
		}},
		ErrorSection:     TaskSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Spec not found for ID",
		Version:          1,
	}
}

// NewTaskSpecNotFoundForIDBuilder creates a new error builder for the code "spec_not_found_for_id".
func NewTaskSpecNotFoundForIDBuilder(id string) *TaskSpecNotFoundForIDBuilder {
	return &TaskSpecNotFoundForIDBuilder{arguments: impl.ErrorArguments{"id": impl.NewErrorArgument(id, "the id of the task")}}
}

// NewTaskSpecNotFoundForID creates a new error with the code "spec_not_found_for_id".
func NewTaskSpecNotFoundForID(id string) Error {
	return NewTaskSpecNotFoundForIDBuilder(id).Build()
}

// WorkflowSection defines a section of errors with the following scope:
// Workflow errors
var WorkflowSection = &impl.ErrorSection{
	Key:   "workflow",
	Title: "Workflow errors",
}

// WorkflowExecutionErrorCode is the code for an instance of "execution_error".
const WorkflowExecutionErrorCode = "nt_workflow_execution_error"

// IsWorkflowExecutionError tests whether a given error is an instance of "execution_error".
func IsWorkflowExecutionError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowExecutionErrorCode)
}

// IsWorkflowExecutionError tests whether a given error is an instance of "execution_error".
func (External) IsWorkflowExecutionError(err errawr.Error) bool {
	return IsWorkflowExecutionError(err)
}

// WorkflowExecutionErrorBuilder is a builder for "execution_error" errors.
type WorkflowExecutionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "execution_error" from this builder.
func (b *WorkflowExecutionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The workflow failed to execute.",
		Technical: "The workflow failed to execute.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "execution_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow execution error",
		Version:          1,
	}
}

// NewWorkflowExecutionErrorBuilder creates a new error builder for the code "execution_error".
func NewWorkflowExecutionErrorBuilder() *WorkflowExecutionErrorBuilder {
	return &WorkflowExecutionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowExecutionError creates a new error with the code "execution_error".
func NewWorkflowExecutionError() Error {
	return NewWorkflowExecutionErrorBuilder().Build()
}

// WorkflowInvalidStepDependencyErrorCode is the code for an instance of "invalid_step_dependency_error".
const WorkflowInvalidStepDependencyErrorCode = "nt_workflow_invalid_step_dependency_error"

// IsWorkflowInvalidStepDependencyError tests whether a given error is an instance of "invalid_step_dependency_error".
func IsWorkflowInvalidStepDependencyError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowInvalidStepDependencyErrorCode)
}

// IsWorkflowInvalidStepDependencyError tests whether a given error is an instance of "invalid_step_dependency_error".
func (External) IsWorkflowInvalidStepDependencyError(err errawr.Error) bool {
	return IsWorkflowInvalidStepDependencyError(err)
}

// WorkflowInvalidStepDependencyErrorBuilder is a builder for "invalid_step_dependency_error" errors.
type WorkflowInvalidStepDependencyErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_step_dependency_error" from this builder.
func (b *WorkflowInvalidStepDependencyErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Step name {{step}} is not a valid dependency",
		Technical: "Step name {{step}} is not a valid dependency",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_step_dependency_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  422,
		}},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid step dependency error",
		Version:          1,
	}
}

// NewWorkflowInvalidStepDependencyErrorBuilder creates a new error builder for the code "invalid_step_dependency_error".
func NewWorkflowInvalidStepDependencyErrorBuilder(step string) *WorkflowInvalidStepDependencyErrorBuilder {
	return &WorkflowInvalidStepDependencyErrorBuilder{arguments: impl.ErrorArguments{"step": impl.NewErrorArgument(step, "The invalid step name")}}
}

// NewWorkflowInvalidStepDependencyError creates a new error with the code "invalid_step_dependency_error".
func NewWorkflowInvalidStepDependencyError(step string) Error {
	return NewWorkflowInvalidStepDependencyErrorBuilder(step).Build()
}
