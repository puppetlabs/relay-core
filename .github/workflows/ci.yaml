name: CI
on: [push, pull_request]
jobs:
  init:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - id: test-gha-token-available
      uses: actions/github-script@v6
      with:
        script: return 'ACTIONS_ID_TOKEN_REQUEST_URL' in process.env
    outputs:
      gha-token-available: ${{ steps.test-gha-token-available.outputs.result }}
  build:
    needs:
    - init
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.17'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Set up Buildah
      run: |
        mkdir -p ~/.config/containers
        cp -r hack/containers/* ~/.config/containers
    #- name: Build
    #  run: scripts/ci build
    - name: Authenticate to Google Cloud
      if: needs.init.outputs.gha-token-available == 'true'
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: projects/3502833910/locations/global/workloadIdentityPools/github-actions/providers/puppetlabs
        service_account: relay-core-release@puppet-relay-contrib-oss.iam.gserviceaccount.com
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
    - name: Release
      run: scripts/ci release
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - k3s-image: rancher/k3s:v1.21.9-k3s1
          gvisor-version: 'latest'
        - k3s-image: rancher/k3s:v1.21.9-k3s1
          gvisor-version: '20220124'
        - k3s-image: rancher/k3s:v1.20.15-k3s1
          gvisor-version: '20220124'
    env:
      KUBECONFIG: /tmp/kubeconfig
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.17'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download gVisor
      run: |
        mkdir -p ${{ runner.temp }}/gvisor && cd ${{ runner.temp }}/gvisor
        for binary in runsc containerd-shim-runsc-v1; do
          for file in "${binary}" "${binary}.sha512"; do
            curl -L "https://storage.googleapis.com/gvisor/releases/release/${{ matrix.gvisor-version }}/$( uname -m )/${file}" \
              -o "${file}"
          done
          shasum -a 512 -c "${binary}.sha512"
          chmod +x "${binary}"
        done
    - id: install-k3d
      name: Install k3d
      run: curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    - name: Set up Kubernetes cluster
      run: |
        k3d cluster create relay-core-test \
          --image ${{ matrix.k3s-image }} \
          --volume ${{ runner.temp }}/gvisor/runsc:/sbin/runsc \
          --volume ${{ runner.temp }}/gvisor/containerd-shim-runsc-v1:/sbin/containerd-shim-runsc-v1 \
          --volume ${{ github.workspace }}/hack/k3s/runsc.toml:/etc/containerd/runsc.toml \
          --volume ${{ github.workspace }}/hack/k3s/config-v1.19.toml.tmpl:/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl \
          --k3s-arg '--flannel-backend=none@server:*' \
          --k3s-arg '--no-deploy=traefik@server:*' \
          --k3s-arg '--disable-network-policy@server:*'
    - name: Install Calico
      run: |
        kubectl create -f https://docs.projectcalico.org/archive/v3.20/manifests/tigera-operator.yaml
        for i in $( seq 10 ); do
          test -n "$( kubectl get crd installations.operator.tigera.io --ignore-not-found -o name )" && break
          sleep 5
        done
        kubectl wait --for=condition=established --timeout=60s crd installations.operator.tigera.io
        kubectl apply -f ${{ github.workspace }}/hack/k3s/calico.yaml
    - name: Review Docker containers
      if: always()
      run: docker ps -a
    - name: Review Docker logs for k3d
      if: success() || steps.install-k3d.outcome == 'success'
      run: |
        k3d node list --no-headers | cut -d' ' -f1 | xargs -n1 docker logs
    - name: Test
      env:
        RELAY_TEST_E2E_KUBECONFIG: ${{ env.KUBECONFIG }}
        RELAY_TEST_E2E_GVISOR_HANDLER: runsc
      run: scripts/ci test
  deploy:
    needs:
    - init
    - build
    - test
    if: needs.init.outputs.gha-token-available == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Deploy
      env:
        RELAY_OPERATIONS_API_TOKEN: ${{ secrets.RELAY_OPERATIONS_API_TOKEN }}
      run: scripts/ci deploy
